=================================
LAMMPS Calculations Using atomman
=================================

Many of the functions of the iprPy.input and iprPy.prepare subpackages are
associated with handling calculations that use the atomman Python package to
perform LAMMPS molecular dynamics simulations.  This page describes some of
the methods of the input subpackage and how they can be used to easily set up
simulation systems from sets of standardized input parameters.  More
information on the methods of the prepare submodule can be found in the next
section.

Input function design
---------------------

All of the functions described here follow the same basic structure:

#. The functions all take the input_dict dictionary of input parameters as the
   first argument.

#. The function only operates on the parameters contained within input_dict.
   Each function reads input parameters from pre-defined keys of input_dict
   and saves the processed values to input_dict.  No calculation parameters
   are returned by the function.

    #. Basic input parameters can be modified by the function by assigning
       default values if needed, and simple conversion of string inputs to
       numerical values.

    #. Terms generated by the functions should be saved to new input_dict keys
       as opposed to overwriting the keys the function uses as inputs.  This
       is so that the original format can be retained where possible.

#. The function's keyword arguments can be used to redefine the input_dict
   keys accessed by the function. For example, if you want function funx to
   use input_dict['keyname1'] instead of the default input_dict['keyname'],
   then use the following function call::
    
    iprPy.input.funx(input_dict, keyname='keyname1')
    
   This is useful for calculations where multiple definitions of the same
   parameters are needed, e.g. grain boundary calculations need to define two
   component atomic configurations with different orientations.

#. Some functions have an optional *build* keyword parameter that takes a
   boolean value.  Giving *build* a value of False keeps the function from
   generating complex data structures and objects based on the inputs and only
   processes the simple terms.  This is useful in preparing calculations where
   input terms that appear in the calculation's record need to be processed,
   but other complex input terms are not needed.  For instance, parameters
   defining a system (e.g. size multipliers and axis orientations) are
   important for defining the calculation and therefore need to appear in the
   calculation's record when it is prepared, but the actual generated atomic
   system is not needed until the calculation is later performed.

Designing the input functions in this fashion is convenient as each function
manipulates and extends the standardized input parameters collected within
input_dict.

List of basic atomman-based input functions
-------------------------------------------

This section lists the basic functions of iprPy.input related to handling
input terms for atomman-based calculations and the input_dict keys that each
function accesses.  Additional functions exist related to specific
requirements of certain calculations. See the iprPy.input documentation for a
complete list.

**commands()** handles input parameters for the commands used to run LAMMPS
simulations.

- 'lammps_command' is the LAMMPS executable to use.  Required.

- 'mpi_command' is the MPI executable and options to use for running LAMMPS in
   parallel.  Default value is None.
   
- 'lammps_version' is the string LAMMPS version of the 'lammps_command'
   executable.

- 'lammps_date' is a datetime.date object corresponding to the LAMMPS version
   of the 'lammps_command' executable.

**units()** handles input parameters for defining the default units of
input/output values.

- 'length_unit' the unit of length to use. Default value is 'angstrom'.

- 'energy_unit' the unit of energy to use. Default value is 'eV'.

- 'pressure_unit' the unit of pressure to use. Default value is 'GPa'.

- 'force_unit' the unit of force to use. Default is value 'eV/angstrom'.

**potential()** handles input parameters for defining LAMMPS-implemented
potentials.

- 'potential_file' is the path to the potential_LAMMPS record associated with
  the potential being used.  Required.

- 'potential_dir' is the path to the directory containing any potential
  archives (i.e. files) that define parameters of the potential. Default value
  is ''.

- 'potential_content' is a loaded DataModelDict of a potential_LAMMPS record
  to use instead of 'potential_file'.  This term is useful for prepare
  functions where the content needs to be loaded before 'prepare_file' exists.
  Default value is None (use 'potential_file').

- 'potential' is an atomman.lammps.Potential object initialized by loading
  'potential_file' (or 'potential_content').

**systemload()** handles input parameters for loading an atomic configuration
from a file.

- 'load_file' is the path to the file containing an atomic configuration to
  load.  Required.

- 'load_style' indicates the format of 'load_file' as defined by 
  atomman.load().  Default value is 'system_model'.

- 'load_options' lists all other parameter options to use when calling
  atomman.load().  Allowed terms depend on 'load_style'.  Default value is
  None.

- 'load_content' is an alternate file path or open file-like object to use
  instead of 'load_file'.  This term is useful for prepare functions where the
  content needs to be loaded before 'load_file' exists.  Default value is None
  (use 'load_file').

- 'box_parameters' is a string of 3 or 6 terms associated with scaling the
  loaded system's box dimensions.  Default value is None (no rescaling).

- 'system_family' is the system's family (i.e. prototype) that is useful for
  tracking and identifying related calculations.  This is extracted from 
  'load_file'.

- 'ucell' is an atomman.System obtained by loading 'load_file' (or 
  'load_content').

- 'symbols' is the list of atomic model symbols to associate with the integer
  atom types of 'ucell'.  Default behavior is to extract this from the 
  'load_file', however, a replacement value can be given as a string input.
  Required if 'load_file' contains no element/symbol information.

**systemmanipulate()** handles input parameters for manipulating a loaded
atomic configuration.  Starting with the 'ucell' system, an 'initialsystem' is
constructed by rotating, shifting and multiplying a system (in that order).

- 'ucell' is the root atomman.System to apply the manipulations to.

- 'x_axis' is a string defining the crystallographic axis to make parallel to
  the Cartesian x-axis.  Default value is '1 0 0'.

- 'y_axis' is a string defining the crystallographic axis to make parallel to
  the Cartesian y-axis.  Default value is '0 1 0'.

- 'z_axis' is a string defining the crystallographic axis to make parallel to
  the Cartesian z-axis.  Default value is '0 0 1'.

- 'atomshift' is a string defining a scaled rigid body shift to apply to all
  atoms.  Default value is '0 0 0'.

- 'sizemults' is a string of 3 or 6 terms indicating the direction and number
  of replicas of the transformed system to use.  Default value is '1 1 1'.
  NOTE: This value is transformed from a string to a 3x2 array.

- 'axes' is a 3x3 array combining the '\*_axis' terms.

- 'initialsystem' is the resulting atomman.System after the manipulations.

**minimize()** handles input parameters related to LAMMPS minimize and min_modify
commands.  Note: at least one of 'energytolerance' or 'forcetolerance' must be
specified as they both cannot have values of zero.

- 'energytolerance' the value for the etol parameter of the minimize command.
  This value is unitless.  Default value is 0.0.
  
- 'forcetolerance' the value for the ftol parameter of the minimize command.
  This value is in units of force. Default value is 0.0.
  
- 'maxiterations' the value for the maxiter parameter of the minimize command.
  Default value is 10000.

- 'maxevaluations' the value for the maxeval parameter of the minimize command.
  Default value is 100000.

- 'maxatommotion' the value for the dmax parameter of the min_modify command.
  This value is in units of length.  Default value is '0.01 angstrom'.

- 'force_unit' the default unit of force to use for 'forcetolerance' if unit
  information is not given.

- 'length_unit' the default unit of length to use for 'maxatommotion' if unit
  information is not given.