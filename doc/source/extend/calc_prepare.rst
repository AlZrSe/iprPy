===========================
Generating a Prepare Script
===========================

The final component in developing a calculation to run in high-throughput with
iprPy is to create a prepare script.  The basic outline for a calculation's
prepare is 

#. Process prepare input parameters.  Note that the input parameters for
   prepare are related to the calculation's input parameters, but are not
   typically identical.

#. Access a database and build a list of all existing calculation records
   associated with the calculation being prepared.

#. Generate (meaningful) combinations of calculation input parameters based on
   the prepare input parameters.

#. Compare each generated combination of parameters to the list of existing
   calculation records.  If the combination is new (i.e. no match found), do
   the remaining steps.

#. Create a calculation instance folder in a specified 'run_directory'.

#. Build an input parameter file based on the combination of parameters and
   save it within the instance folder.

#. Copy all other required files including the calculation script to the
   instance folder.

#. Build a new calculation record based on the combination of parameters and
   upload it to the database.

Functions of the prepare script
-------------------------------

Each prepare script has five primary functions:

- main() function called when the script is executed directly.  This reads in
  a given input parameter file, converts it into input_dict dictionary,
  generates dbase and run_directory arguments from input terms, and calls::
    
    prepare(dbase, run_directory, **input_dict).

- prepare() function that prepares instances of the calculation. See the next
  section for more detailed information.

- unusedkeys() function returns a list of input parameter names for the
  calculation that are not interpreted by the prepare.  These tend to be
  parameters in which alternate calculation parameters provide the same
  information, or are automatically generated by alternate prepare parameters.

- singularkeys() function returns a list of input parameter names for the
  prepare that are restricted from having multiple values.

- multikeys() function returns a list of input parameter names for the prepare
  that can have multiple values.

The prepare() function
----------------------

Each calculation's prepare function takes two required arguments:

- *dbase* is an iprPy.Database object associated with the database to access.

- *run_directory* is a str specifying the path to the directory where the
  prepared calculation instances are placed.

All other arguments are keyword arguments corresponding to the prepare's input
parameters.  The singularkeys() and multikeys() functions provide lists of the
supported parameters. Defining prepare() functions in this way makes them
compatible with the iprPy.Calculation.prepare() method and the iprPy prepare
line command.

There are two main challenges that drive the design and structure of the
prepare functions:

1. Both calculation input parameters and meaningful combinations of such are
   distinct for every calculation.  This means that each calculation is
   required to have its own unique prepare function.  Luckily, most of what
   the prepare functions do is similar making it convenient to create new
   prepare functions by modifying existing ones.  In doing so, the main
   consideration is related to specifying the proper way of iterating over
   parameters (which ones are independent, paired, etc.).

   Note: the similarity of code across calculations suggests that there is
   good opportunity to define new functions in the iprPy.prepare submodule to
   simplify the prepare functions.

2. Determining if a combination of parameters is new can be tricky because the
   comparisons require the parameters to be processed (default values
   assigned, reference files processed, etc.).  Ideally, the parameters should
   be processed by the exact same functions as those used when the calculation
   is performed to ensure compatibility.  However, there are important
   differences between the parameters being generated by the prepare function
   and the parameters used to run a calculation.

   The first step of processing a parameter combination is to generate an
   input_dict dictionary of input parameters for the calculation.  For the most
   part, the dictionary keys directly correspond to the parameters allowed by a
   calculation's input parameter file.  However, additional terms can also be
   included that are important during prepare but not allowed when the
   calculation is executed.
  
   This ability is important when it comes to specifying reference files and
   records as parameters.  These reference files are typically copied to each
   calculation instance that uses them, and the input parameters give their
   relative location.  The problem during preparation of the calculation is
   that the instance, and the associated files, do not actually exist at the
   time that the input parameters are processed.  To get around this, each
   \*_file parameter that specifies a reference file name (i.e. load_file,
   potential_file) has a corresponding \*_content parameter in which the
   contents of the reference file can be saved.  Thus, the contents of a
   reference file can be included in the processing before the file actually
   exists.
  
   The terms in input_dict are then directly processed by the calculation's
   process_input() function by using the iprPy.Calculation.process_input()
   method::
    
    calculation = iprPy.Calculation(style=calc_style)
    ...
    calculation.process_input(input_dict, calc_key, build=False)
  
   It is important to note the build argument in this function call.  With
   build=False, complex, derived inputs that are only important when the
   calculation is executed (such as initial atomic configurations) will not be
   constructed.  This not only saves processing time, but it also allows for
   calculations to be prepared based on reference records that are not yet
   complete.
  
   Finally, a Record is constructed based on the processed input_dict::
    
    model = iprPy.buildmodel(record_style, calc_style, input_dict)
    new_record = iprPy.Record(name=calc_key, content=model.xml(), style=record_style)
  
   This Record object can then easily be compared to the list of existing
   records using the Record.isnew() method.

Functions of iprPy.prepare submodule
------------------------------------

The iprPy.prepare submodule defines functions that can assist in common handling of prepare functions across different calculations.  This section gives a brief description on a few of these functions, which are focused on calculations that use the atomman package for performing LAMMPS simulations.  For more details and a complete list of the functions, see the iprPy.prepare documentation.

**ipotentials()** iteratively yields all potential_LAMMPS records within a database that match  specified delimiting conditions.

**iprototypes()** iteratively yields all crystal_prototype records within a database that match  specified delimiting conditions.

**icalculations()** iteratively yields all calculation records of a specified record style within a database that match  specified delimiting conditions.

**isymbolscombos()** given a crystal_prototype record and potential_LAMMPS record, this function iterates over all combinations of the potential's element model symbols and the prototype's unique atomic sites.